
WHY WE USE SPRING? 

In the early 2000s, web development primarily relied on technologies like HTML CSS, and JavaScript Similarly, before the advent of modern programming languages like , Python, and C++, many developers used C as the foundational language for software development. The evolution of these technologies has led to the emergence of frameworks such as ReactJS and Next.js for web development, which simplify complex tasks and enhance productivity. Before the introduction of Spring, Java developers primarilyrelied on Java EE (Enterprise Edition) for building enterprise applications. However, Java EE was often cumbersome and complex, making it challenging for developers to create robust applications efficiently. Building server-side logic required significant time and effort,leading to frustration among developers.Recognizing these challenges, Rod Johnson developed the Spring Framework to provide a more straightforward and efficient way to build Java applications. Spring simplifies application development by offering lightweight framework that promotes good programming practices and allows developers to focus on writing business logic rather than dealing with intricate configurations.With Spring, developers can quickly set up a server and implement complex 
business logic with minimal effort. 



($) CORE FEATURES OF SPRING-:

1) INVERSION OF CONTROL (IOC):

WHAT IT IS: IoC is a way to design software where the control of creating and managing objects is given to a framework or container instead of the code itself.

WHY WE USE IT: This makes it easier to change parts of the code without affecting other parts. It helps keep things organized and flexible.

HOW IT WORKS: Instead of your code creating objects directly, you tell the framework how to do it. The framework then creates and manages these objects for you.

2) DEPENDENCY INJECTION (DI):

WHAT IT IS: DI is a specific way to implement IoC. It means that instead of a class creating its own dependencies (like other objects it needs), those dependencies are provided from outside.

WHY WE USE IT: This reduces the connections between different parts of the code. If you want to change something, you can do it easily without rewriting a lot of code.

HOW IT WORKS: Dependencies can be given to a class in different ways


* BEFORE SPRING HOW WE INTERACT WITH DIFFERENT CLASS:

1. filename: (Vehicle.java) 

public interface Vehicle {
    double mileage();
}

2. filename: (Car.java)

public class Car implements Vehicle {
    public double mileage() {
        return 20.5; 
    }
}


3. filename: (Bus.java)

public class Bus implements Vehicle {  
    public double mileage() {
        return 10.3; 
    }
}

4.  filename: (Main.java)

public class Main {
    public static void main(String[] args) {
        
        Vehicle myCar = new Car(); 
        Vehicle myBus = new Bus(); 

        // Calculate and display mileage for Car
        System.out.println( myCar.mileage() + " km/l");

        // Calculate and display mileage for Bus
        System.out.println( myBus.mileage() + " km/l");
    }
}


* Problem:

1): Object Creation in the Main Class: In our current implementation, we create an instance of each class directly in the Main class. While this approach may work for a small application with just a few files, it becomes impractical in larger enterprise applications that can have hundreds of Java files (classes). Managing the creation of objects for all these classes directly in the Main class can lead to a cluttered and unmanageable codebase.

2): Difficulty in Managing Dependencies: Another significant issue arises when we need to add or remove objects. If we decide to change an object (for example, switching from one implementation to another), we must modify the Main class and any other places where that object is used. This can lead to extensive code changes and increases the risk of introducing errors, making the application harder to maintain and evolve over time.

* note: 
When we talk about using Spring, we often mention low coupling and high cohesion. Here’s what these terms mean in simpler words:

coupling: Coupling refers to the degree of dependency between classes or modules.  less degree dependecy between classes or module less risk(low coupling), high degree dependecy between classes or module high risk (high coupling).

cohesion: Cohesion refers to how closely related the functions within a single module or class are.
less closely related between module or class high risk,  closely related between module or class less risk

3): Difficulties in Testing


* AFTER SPRING HOW WE INTERACT WITH DIFFERENT CLASS:



















INVERSION OF CONTROL (IOC): 

the Spring IoC container takes over the responsibility of instantiating, configuring, and managing the lifecycle of application objects, known as beans.

in spring not in springboot there 2 type of ioc
 1:) Beanfactory():-(Basic Version of ioc container)Use BeanFactory when memory usage is a critical concern  
 2:) ApplicationContext:- (Advance version of ioc ) Generally recommended for all standard applications because it provides more functionality and is easier to use.



Dependency Injection (DI): DI is a specific implementation of IoC where an object’s dependencies are provided externally rather 
than being created internally.This promotes loose coupling between classes and enhances testability.



By leveraging IoC and DI, Spring allows developers to manage complex dependencies easily, leading to cleaner, more maintainable code. 
As a result, developers can focus on building robust applications without getting bogged down by intricate object management issues.